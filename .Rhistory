dmmeters = distance_moved(het[het$species == "DM",], dmtags); dometers = distance_moved(het[het$species == "DO",], dotags); pbmeters = distance_moved(het[het$species == "PB",], pbtags); ppmeters = distance_moved(het[het$species == "PP",], pptags); pfmeters = distance_moved(het[het$species == "PF",], pftags)
#cricetids
petags = unique(cricet[cricet$species == "PE",]$tag); pmtags = unique(cricet[cricet$species == "PM",]$tag); rmtags = unique(cricet[cricet$species == "RM",]$tag)
pemeters = distance_moved(cricet[cricet$species == "PE",], petags); pmmeters = distance_moved(cricet[cricet$species == "PM",], pmtags); rmmeters = distance_moved(cricet[cricet$species == "RM",], rmtags)
#folivores
shtags = unique(foliv[foliv$species == "SH",]$tag); sftags = unique(foliv[foliv$species == "SF",]$tag); naotags = unique(foliv[foliv$species == "NAO",]$tag)
shmeters = distance_moved(foliv[foliv$species == "SH",], shtags); sfmeters = distance_moved(foliv[foliv$species == "SF",], sftags); naometers = distance_moved(foliv[foliv$species == "NAO",], naotags)
#insectivores
oltags = unique(insec[insec$species == "OL",]$tag); ottags = unique(insec[insec$species == "OT",]$tag)
olmeters = distance_moved(insec[insec$species == "OL",], oltags); otmeters = distance_moved(insec[insec$species == "OT",], ottags)
# concatenate distance vectors for recaptured individuals by GUILD
Hgran = c(dmmeters, dometers, pbmeters, ppmeters, pfmeters)
Cgran = c(pemeters, pmmeters, rmmeters)
foli = c(shmeters, sfmeters) #separate NAO because they use different strategy - MIDDENS
insectiv = c(otmeters, olmeters)
Hgran_brkpt = mean(Hgran) + sd(Hgran)
Cgran_brkpt = mean(Cgran) + sd(Cgran)
foli_brkpt = mean(foli) + sd(foli)
nao_brkpt = mean(naometers) + sd(naometers)
ins_brkpt = mean(insectiv) + sd(insectiv)
periods = c(261:380)
exclosures = c(5, 7, 10, 16, 23, 24)
krat_excl = c(5, 7, 10, 16, 23, 24, 3, 6, 13, 15, 18, 19, 20, 21)
dat = subset(het, species == "DO")
head(dat)
covariates = matrix(0, nrow = length(tags), ncol = 7)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
prd = periods
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
t = 1
head(covariates)
head(capture_history)
covariates[t,3] = 1 }
covariates[t,3] = 1
head(covariates)
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
head(capture_history)
capture_history[t,]
sd_mass = sd_avg_mass(dat, ind_dat)
covariates[t,] = sd_mass
covariates[t]
covariates[t,]
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
covariates[t,1] = 1 }
covariates[t,1] = 1
covariates[t,4] = sd_mass
covariates[t,]
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(DO_MARK)
tail(DO_MARK)
t = 544
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
ind_dat
spp_mean = mean(dat$wgt, na.rm = TRUE) #include ALL indivs (should I NOT INCLUDE juveniles and pregnant indivs?)
spp_mean
spp_sd = sd(dat$wgt, na.rm = TRUE)
spp_sd
ind_mean = mean(ind_dat$wgt, na.rm = TRUE)
ind_mean
ind_mean > 0
ind_mean == NaN
ind_mean > 1
is.numeric(ind_mean)
ind_dat$wgt
is.na(ind_dat$wgt)
is.na(ind_mean)
sd_avg_mass = function (dat, ind_dat) {
# finds the average of all the masses for all the captures in the species data, as a baseline.
## Then takes the average mass for an individual and calculates the proportional difference away from that avg. species
## level mass.
spp_mean = mean(dat$wgt, na.rm = TRUE) #include ALL indivs (should I NOT INCLUDE juveniles and pregnant indivs?)
spp_sd = sd(dat$wgt, na.rm = TRUE)
ind_mean = mean(ind_dat$wgt, na.rm = TRUE)
if (is.na(ind_mean)) {
ind_sd = 0
}
else {
# num of standard deviations the indiv's mean wgt is from spp mean wgt
ind_sd = round((ind_mean - spp_mean) / spp_sd , 4)
}
return (ind_sd) #number of standard deviations individual is away from capture weight mean
}
sd_mass = sd_avg_mass(dat, ind_dat)
sd_mass
head(covariates)
covariates[t,group] = covariates[t,group]*-1
covariates
head(covariates)
group = c(1,2,3)
covariates[t,group] = covariates[t,group]*-1
group = c(1,2,3)
head(covariates)
t = 1
covariates[t,group] = covariates[t,group]*-1
head(covariates)
t = 544
sd_mass = sd_avg_mass(dat, ind_dat)
sd_mass
covariates[t,4] = sd_mass
else if (sex == "F") {
else if (sex == "F")
covariates[t,2] = 1 }
covariates[t,2] = 1
for (i in 1:nrow(ind_dat)){
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
capture_history[t,]
covariates[t,]
ind_dat$species
ind_dat[1,]$species
ind_dat[1,]$species %in% list("DO", "DM")
unique(cricet$species)
if (ind_dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){ # record guild in dummy variables (cols 5:7)
covariates[t, 5] = 1 }
else if (ind_dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[t, 6] = 1}
else if (ind_dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[t,7] = 1 }  #all zeros indicate insectivores
covariates[t, 5] = 1 }
covariates[t, 5] = 1 }
covariates[t, 5] = 1
covariates[t,]
covariates[,7 = 1]
covariates[,7] = 1
covariates
dat[1,]$species
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
# A is a placeholder for the concatenated data (code from D. Koons)
A <- data.frame(ch_matrix)
concat <- paste(A$X1,A$X2,A$X3,A$X4,A$X5,A$X6,A$X7,A$X8,A$X9,A$X10,A$X11,A$X12,
A$X13,A$X14,A$X15,A$X16,A$X17,A$X18,A$X19,A$X20,A$X21,A$X22,A$X23,A$X24,A$X25,
A$X26,A$X27,A$X28,A$X29,A$X30,A$X31,A$X32,A$X33,A$X34,A$X35,A$X36,A$X37,A$X38,A$X39,
A$X40,A$X41,A$X42,A$X43,A$X44,A$X45,A$X46,A$X47,A$X48,A$X49,A$X50,A$X51,A$X52,
A$X53,A$X54,A$X55,A$X56,A$X57,A$X58,A$X59,A$X60,A$X61,A$X62,A$X63,A$X64,A$X65,
A$X66,A$X67,A$X68,A$X69,A$X70,A$X71,A$X72,A$X73,A$X74,A$X75,A$X76,A$X77,A$X78,
A$X79,A$X80,A$X81,A$X82,A$X83,A$X84,A$X85,A$X86,A$X87,A$X88,A$X89,A$X90,A$X91,
A$X92,A$X93,A$X94,A$X95,A$X96,A$X97,A$X98,A$X99,A$X100,A$X101,A$X102,A$X103,A$X104,
A$X105,A$X106,A$X107,A$X108,A$X109,A$X110,A$X111,A$X112,A$X113,A$X114,A$X115,
A$X116,A$X117,A$X118,A$X119,A$X120,sep='')
semicol <- rep(";", nrow(A))
mark_df <- cbind(concat,cov_matrix,semicol)
return (mark_df)
}
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
breakpoint = Hgran_brkpt
# record guild in dummy variables (cols 5:7)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
dim(capture_history)
dim(covariates)
tail(capture_history)
tail(covariates)
s = subset(covariates, unidsex == 1)
s = subset(covariates$unidsex == 1)
s = subset(covariates, unidsex == 1)
names(capture_history)
colnames(capture_history)
head(capture_history)
ch_matrix = capture_history
A <- data.frame(ch_matrix)
names(A)
v <- within(A,  id <- paste(names(A), sep="")
)
dv <- do.call(paste, c(A[c(names(A))], sep = ""))
dv
head(v)
head(dv)
concat <- do.call(paste, c(A[c(A(names))], sep = ""))
dv <- do.call(paste, c(A[c(names(A))], sep = ""))
concat <- do.call(paste, c(A[c(names(A))], sep = ""))
length(concat)
dim(concat)
is.vector(concat)
names(A)
b = names(A)
b
b = b[-115:120]
b = b[-120]
b
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
# A is a placeholder for the concatenated data (code from D. Koons)
A <- data.frame(ch_matrix)
concat <- do.call(paste, c(A[c(names(A))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(A)) # makes a vector of semicolons
mark_df <- cbind(concat,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
mark_df = concat_ch(capture_history, covariates)
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
# A is a placeholder for the concatenated data (code from D. Koons)
A <- data.frame(ch_matrix)
encounters <- do.call(paste, c(A[c(names(A))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(A)) # makes a vector of semicolons
mark_df <- cbind(encounters,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
ch_df <- data.frame(ch_matrix)
encounters <- do.call(paste, c(ch_df[c(names(ch_df))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(ch_df)) # makes a vector of semicolons
mark_df <- cbind(encounters,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
library(Rmark)
library(RMark)
install.packages("RMark")
library(RMark) #can't install on mac? Update R version?
write.table(DO_MARK, file = "MARK_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DO_MARK, file = "MARK_datafiles//do_mark.inp", row.names = F, col.names = F)
write.table(DO_MARK, file = "MARK_datafiles//do_mark2.inp", row.names = F, col.names = F)
write.table(DO_MARK, file = "mark_datafiles//do_mark2.inp", row.names = F, col.names = F)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(cov_matrix)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
dim(capture_history)
dim(covariates)
covariates
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
ch_df <- data.frame(ch_matrix)
encounters <- do.call(paste, c(ch_df[c(names(ch_df))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(ch_df)) # makes a vector of semicolons
mark_df <- cbind(encounters, cov_matrix, semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
source("movement_fxns.r")
mark_df = concat_ch(capture_history, covariates)
source("C://Users//sarah//Documents//GitHub//portal-rodent-dispersal//movement_fxns.R")
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(DO_MARK)
dim(DO_MARK)
Hgran(brkpt)
Hgran_brkpt
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DM_MARK, file = "MARK_datafiles//dm_mark.txt", row.names = F, col.names = F)
write.table(PB_MARK, file = "MARK_datafiles//pb_mark.txt", row.names = F, col.names = F)
write.table(PP_MARK, file = "MARK_datafiles//pp_mark.txt", row.names = F, col.names = F)
write.table(PF_MARK, file = "MARK_datafiles//pf_mark.txt", row.names = F, col.names = F)
write.table(PE_MARK, file = "MARK_datafiles//pe_mark.txt", row.names = F, col.names = F)
write.table(PM_MARK, file = "MARK_datafiles//pm_mark.txt", row.names = F, col.names = F)
write.table(RM_MARK, file = "MARK_datafiles//rm_mark.txt", row.names = F, col.names = F)
write.table(SH_MARK, file = "MARK_datafiles//sh_mark.txt", row.names = F, col.names = F)
write.table(SF_MARK, file = "MARK_datafiles//sf_mark.txt", row.names = F, col.names = F)
write.table(NAO_MARK, file = "MARK_datafiles//nao_mark.txt", row.names = F, col.names = F)
write.table(OT_MARK, file = "MARK_datafiles//ot_mark.txt", row.names = F, col.names = F)
write.table(OL_MARK, file = "MARK_datafiles//ol_mark.txt", row.names = F, col.names = F)
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.txt", row.names = F, col.names = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.txt", row.names = F, col.names = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.txt", row.names = F, col.names = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.txt", row.names = F, col.names = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.txt", row.names = F, col.names = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.txt", row.names = F, col.names = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.txt", row.names = F, col.names = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.txt", row.names = F, col.names = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.txt", row.names = F, col.names = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.txt", row.names = F, col.names = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.txt", row.names = F, col.names = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.txt", row.names = F, col.names = F)
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.inp", row.names = F, col.names = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.inp", row.names = F, col.names = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.inp", row.names = F, col.names = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.inp", row.names = F, col.names = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.inp", row.names = F, col.names = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.inp", row.names = F, col.names = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.inp", row.names = F, col.names = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.inp", row.names = F, col.names = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.inp", row.names = F, col.names = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.inp", row.names = F, col.names = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.inp", row.names = F, col.names = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.inp", row.names = F, col.names = F)
MSdata <- convert.inp("do_mark.inp",
group.df=data.frame(sex=c("male","female","unidsex")))
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")))
head(DO_MARK)
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")),
covariates = data.frame(mass = "sd_mass", guild = c("hgran", "cgran", "foli", "insec")))
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")),
covariates = data.frame(mass = "sd_mass", guild = c("hgran", "cgran", "foli")))
ls()
data(dipper)
example(dipper)
summary(dipper)
dipper[1:5]
dipper[1:5,]
dim(dipper)
plot(density(Hgran), main = 'Portal movement by guild', xlab = 'meters', lwd = 2, col = 'hotpink2')
lines(density(Cgran), col = 'deepskyblue3', lwd = 3, lty = 6)
lines(density(naometers), col = 'indianred4', lwd = 4, lty = 3)
lines(density(foli), col = 'mediumpurple4', lwd = 4, lty = 3)
lines(density(insectiv), col = 'darkgreen', lwd = 2)
legend('topright', c('Hgran', 'Neotoma', 'foliv', 'Cgran', 'insec'), bty = 'n', lty = c(1,3,6,3,1), lwd = 5, seg.len = 2,
col = c('hotpink2', 'indianred4', 'mediumpurple4', 'deepskyblue3', 'darkgreen'))
#### Make an occupancy plot for 2000-2009 (similar to Morgan) #######FIX ME - REFERS TO OLD DATAFRAMES
#proportion of years they were seen in
doyr = length(unique(DO$yr))/10; dmyr = length(unique(DM$yr))/10; pfyr = length(unique(PF$year))/10; ppyr = length(unique(PP$year))/10; pbyr = length(unique(PB$year))/10
peyr = length(unique(PE$yr))/10; pmyr = length(unique(PM$yr))/10; rmyr = length(unique(RM$yr))/10
unique(cricet[cricet$species == "PE", 2])
head(cricet)
unique(cricet[species=="DO",]$yr)
unique(cricet[cricet$species=="PE",]$yr)
unique(cricet[cricet$species=="PE",]$yr)/10
length(unique(cricet[cricet$species=="PE",]$yr))/10
doyr = length(unique(het[het$species=="DO",]$yr))/10; dmyr = length(unique(het[het$species=="DM",]$yr))/10; pfyr = length(unique(het[het$species=="PF",]$yr))/10; ppyr = length(unique(het[het$species=="PP",]$yr))/10; pbyr = length(unique(het[het$species=="PB",]$yr))/10
peyr = length(unique(cricet[cricet$species=="PE",]$yr))/10; pmyr = length(unique(cricet[cricet$species=="PM",]$yr))/10; rmyr = length(unique(cricet[cricet$species=="RM",]$yr))/10
shyr = length(unique(foliv[foliv$species=="SH",]$yr))/10; sfyr = length(unique(foliv[foliv$species=="SF",]$yr))/10; naoyr = length(unique(foliv[foliv$species=="NAO",]$yr))/10
otyr = length(unique(insec[insec$species=="OT",]$yr))/10; olyr = length(unique(insec[insec$species=="OL",]$yr))/10
doyr
peyr
pmyr
shyr
sfyr
otyr
olyr
domo = mean_win_yr_occ(subset(het, species == "DO"))
plot_freq_by_prd(subset(het, species == PB), "PB")
