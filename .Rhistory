write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quotes = F)
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quotes = FALSE)
head(DO_MARK)
library(calibrate)
library(fields)
#---------------------------------------------------------------------------------
#          setup - select wd, import data, source code,  file to collect results
#---------------------------------------------------------------------------------
#set working directory
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
#import the data by guild
het = read.csv("rawdata//heteromyids_2000-2009.csv")   # DO, DM, PB, PP, PF
cricet = read.csv("rawdata//cricetids_2000-2009.csv")  # PE, PM, RM
foliv = read.csv("rawdata//folivores_2000-2009.csv")   # SH, SF, NA (as NAO)
insec = read.csv("rawdata//onychomys_2000-2009.csv")   # OT, OL
# change some cols from factor to character class
het$tag = as.character(het$tag); cricet$tag = as.character(cricet$tag); foliv$tag = as.character(foliv$tag); insec$tag = as.character(insec$tag)
het$species = as.character(het$species); cricet$species = as.character(cricet$species); foliv$species = as.character(foliv$species); insec$species = as.character(insec$species)
het$sex = as.character(het$sex); cricet$sex = as.character(cricet$sex); foliv$sex = as.character(foliv$sex); insec$sex = as.character(insec$sex)
# give untagged individuals a unique 7-number code
het = id_unknowns(het, 16); cricet = id_unknowns(cricet, 16); foliv = id_unknowns(foliv, 16); insec = id_unknowns(insec, 16)
# get rid of 'bad data'; deletes data that is not a pit tag, where sex is inconsistent or where species is inconsistent.
het = subsetDat(het); cricet = subsetDat(cricet); foliv = subsetDat(foliv); insec = subsetDat(insec)
#---------------------------------------------------------------------------------
#          calculate life-history details - reproduction, temporal persistence
#---------------------------------------------------------------------------------
#average proportion of reproductive females by month across all years
doreprd = mean_mo_repro(subset(het, species == "DO" & sex == "F")); dmreprd = mean_mo_repro(subset(het, species == "DM" & sex == "F")); pfreprd = mean_mo_repro(subset(het, species == "PF" & sex == "F")); ppreprd = mean_mo_repro(subset(het, species == "PP" & sex == "F")); pbreprd = mean_mo_repro(subset(het, species == "PB" & sex == "F"));
pereprd = mean_mo_repro(subset(cricet, species == "PE" & sex == "F")); pmreprd = mean_mo_repro(subset(cricet, species == "PM" & sex == "F")); rmreprd = mean_mo_repro(subset(cricet, species == "RM" & sex == "F"))
shreprd = mean_mo_repro(subset(foliv, species == "SH" & sex == "F")); sfreprd = mean_mo_repro(subset(foliv, species == "SF" & sex == "F")); naoreprd = mean_mo_repro(subset(foliv, species == "NAO" & sex == "F"))
otreprd = mean_mo_repro(subset(insec, species == "OT" & sex == "F")); olreprd = mean_mo_repro(subset(insec, species == "OL" & sex == "F"))
# proportion of reproductive females by month and year
doreprdyr = mo_repro(subset(het, species == "DO" & sex == "F")); dmreprdyr = mo_repro(subset(het, species == "DM" & sex == "F")); pfreprdyr = mo_repro(subset(het, species == "PF" & sex == "F")); ppreprdyr = mo_repro(subset(het, species == "PP" & sex == "F")); pbreprdyr = mo_repro(subset(het, species == "PB" & sex == "F"));
pereprdyr = mo_repro(subset(cricet, species == "PE" & sex == "F")); pmreprdyr = mo_repro(subset(cricet, species == "PM" & sex == "F")); rmreprdyr = mo_repro(subset(cricet, species == "RM" & sex == "F"))
shreprdyr = mo_repro(subset(foliv, species == "SH" & sex == "F")); sfreprdyr = mo_repro(subset(foliv, species == "SF" & sex == "F")); naoreprdyr = mo_repro(subset(foliv, species == "NAO" & sex == "F"))
otreprdyr = mo_repro(subset(insec, species == "OT" & sex == "F")); olreprdyr = mo_repro(subset(insec, species == "OL" & sex == "F"))
#track the number of times females uniquely reproduce within years
doirep = indiv_repro(subset(het, species == "DO" & sex == "F")); dmirep = indiv_repro(subset(het, species == "DM" & sex == "F")); pfirep = indiv_repro(subset(het, species == "PF" & sex == "F")); ppirep = indiv_repro(subset(het, species == "PP" & sex == "F")); pbirep = indiv_repro(subset(het, species == "PB" & sex == "F"));
peirep = indiv_repro(subset(cricet, species == "PE" & sex == "F")); pmirep = indiv_repro(subset(cricet, species == "PM" & sex == "F")); rmirep = indiv_repro(subset(cricet, species == "RM" & sex == "F"))
shirep = indiv_repro(subset(foliv, species == "SH" & sex == "F")); sfirep = indiv_repro(subset(foliv, species == "SF" & sex == "F")); naoirep = indiv_repro(subset(foliv, species == "NAO" & sex == "F"))
otirep = indiv_repro(subset(insec, species == "OT" & sex == "F")); olirep = indiv_repro(subset(insec, species == "OL" & sex == "F"))
#proportion of years they were seen in
doyr = length(unique(het[het$species=="DO",]$yr))/10; dmyr = length(unique(het[het$species=="DM",]$yr))/10; pfyr = length(unique(het[het$species=="PF",]$yr))/10; ppyr = length(unique(het[het$species=="PP",]$yr))/10; pbyr = length(unique(het[het$species=="PB",]$yr))/10
peyr = length(unique(cricet[cricet$species=="PE",]$yr))/10; pmyr = length(unique(cricet[cricet$species=="PM",]$yr))/10; rmyr = length(unique(cricet[cricet$species=="RM",]$yr))/10
shyr = length(unique(foliv[foliv$species=="SH",]$yr))/10; sfyr = length(unique(foliv[foliv$species=="SF",]$yr))/10; naoyr = length(unique(foliv[foliv$species=="NAO",]$yr))/10
otyr = length(unique(insec[insec$species=="OT",]$yr))/10; olyr = length(unique(insec[insec$species=="OL",]$yr))/10
# average number of months they were seen in during years in which they were present
domo = mean_win_yr_occ(subset(het, species == "DO")); dmmo = mean_win_yr_occ(subset(het, species == "DM")); pfmo = mean_win_yr_occ(subset(het, species == "PF")); ppmo = mean_win_yr_occ(subset(het, species == "PP")); pbmo = mean_win_yr_occ(subset(het, species == "PB"))
pemo = mean_win_yr_occ(subset(cricet, species == "PE")); pmmo = mean_win_yr_occ(subset(cricet, species == "PM")); rmmo = mean_win_yr_occ(subset(cricet, species == "RM"))
shmo = mean_win_yr_occ(subset(foliv, species == "SH")); sfmo = mean_win_yr_occ(subset(foliv, species == "SF")); naomo = mean_win_yr_occ(subset(foliv, species == "NAO"))
otmo = mean_win_yr_occ(subset(insec, species == "OT")); olmo = mean_win_yr_occ(subset(insec, species == "OL"))
#mean abundance within all years
doabun = allyrs_abun(subset(het, species == "DO")); dmabun = allyrs_abun(subset(het, species == "DM")); pfabun = allyrs_abun(subset(het, species == "PF")); ppabun = allyrs_abun(subset(het, species == "PP")); pbabun = allyrs_abun(subset(het, species == "PB"))
peabun = allyrs_abun(subset(cricet, species == "PE")); pmabun = allyrs_abun(subset(cricet, species == "PM")); rmabun = allyrs_abun(subset(cricet, species == "RM"))
shabun = allyrs_abun(subset(foliv, species == "SH")); sfabun = allyrs_abun(subset(foliv, species == "SF")); naoabun = allyrs_abun(subset(foliv, species == "NAO"))
otabun = allyrs_abun(subset(insec, species == "OT")); olabun = allyrs_abun(subset(insec, species == "OL"))
abuns = cbind(doabun, dmabun, pbabun, ppabun, pfabun, peabun, pmabun, rmabun, shabun, sfabun, naoabun, otabun, olabun)
#---------------------------------------------------------------------------------
#          calculate movement distances, multi-state capture histories
#---------------------------------------------------------------------------------
# get a vector unique tags, then get a vector of distances moved for all recaptured individuals, by SPECIES
#heteromyids
dmtags = unique(het[het$species == "DM",]$tag); dotags = unique(het[het$species == "DO",]$tag); pbtags = unique(het[het$species == "PB",]$tag); pptags = unique(het[het$species == "PP",]$tag); pftags = unique(het[het$species == "PF",]$tag)
dmmeters = distance_moved(het[het$species == "DM",], dmtags); dometers = distance_moved(het[het$species == "DO",], dotags); pbmeters = distance_moved(het[het$species == "PB",], pbtags); ppmeters = distance_moved(het[het$species == "PP",], pptags); pfmeters = distance_moved(het[het$species == "PF",], pftags)
#cricetids
petags = unique(cricet[cricet$species == "PE",]$tag); pmtags = unique(cricet[cricet$species == "PM",]$tag); rmtags = unique(cricet[cricet$species == "RM",]$tag)
pemeters = distance_moved(cricet[cricet$species == "PE",], petags); pmmeters = distance_moved(cricet[cricet$species == "PM",], pmtags); rmmeters = distance_moved(cricet[cricet$species == "RM",], rmtags)
#folivores
shtags = unique(foliv[foliv$species == "SH",]$tag); sftags = unique(foliv[foliv$species == "SF",]$tag); naotags = unique(foliv[foliv$species == "NAO",]$tag)
shmeters = distance_moved(foliv[foliv$species == "SH",], shtags); sfmeters = distance_moved(foliv[foliv$species == "SF",], sftags); naometers = distance_moved(foliv[foliv$species == "NAO",], naotags)
#insectivores
oltags = unique(insec[insec$species == "OL",]$tag); ottags = unique(insec[insec$species == "OT",]$tag)
olmeters = distance_moved(insec[insec$species == "OL",], oltags); otmeters = distance_moved(insec[insec$species == "OT",], ottags)
# concatenate distance vectors for recaptured individuals by GUILD
Hgran = c(dmmeters, dometers, pbmeters, ppmeters, pfmeters)
Cgran = c(pemeters, pmmeters, rmmeters)
foli = c(shmeters, sfmeters) #separate NAO because they use different strategy - MIDDENS
insectiv = c(otmeters, olmeters)
# find breakpoints to use in MARK data structure for future analyses
# data reasonably well fits a lognormal distribution (eyeball and J. Powell)
# breakpoint = mean(logdata) + sd(logdata) of all the distances traveled by recaptured individuals
# using log1p, and back transforming using expm1 should solve the problem of lots of zeros
Hgran_brkpt = expm1(mean(log1p(Hgran)) + sd(log1p(Hgran)))
Cgran_brkpt = expm1(mean(log1p(Cgran)) + sd(log1p(Cgran)))
foli_brkpt = expm1(mean(log1p(foli)) + sd(log1p(foli)))
nao_brkpt = expm1(mean(log1p(naometers)) + sd(log1p(naometers)))
ins_brkpt = expm1(mean(log1p(insectiv)) + sd(log1p(insectiv)))
# Get MARK capture histories
## add unique breakpoints for each species based on histogram data of movement
periods = c(261:380)
exclosures = c(5, 7, 10, 16, 23, 24)
krat_excl = c(5, 7, 10, 16, 23, 24, 3, 6, 13, 15, 18, 19, 20, 21)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quotes = F)
help(write.table)
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quote = F)
#write files to local folder
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quote = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.inp", row.names = F, col.names = F, quote = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.inp", row.names = F, col.names = F, quote = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.inp", row.names = F, col.names = F, quote = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.inp", row.names = F, col.names = F, quote = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.inp", row.names = F, col.names = F, quote = F)
noplacelikehome = function (dat, prd, exclosures, breakpoint){
### Create a set of MARK capture histories by home vs away from home
# Creates a movement history to be used in Mark. Matrix is filled in with zeroes (not captured) and later filled in
## 1 (stayed home), and 2 (away from home).
## Home is determined using the mean + 1 sd of the logged data.
# guild (1 = heteromyid granivore, 2 = cricetid granivore, 3 = folivore, 4 = carnivore)
# species (1 = DO, 2 = DM, 3 = PB, 4 = PP, 5 = PF, 6 = PE, 7 = PM, 8 = RM, 9 = SH, 10 = SF, 11 = NAO, 12 = OT, 13 = OL)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "guild", "species")
group = c(1,2,3) #represent the "group"
# record guild in col 5 of covariates
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 5] = 2}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,5] = 3 }
else {
covariates[,5] = 4}
# record species in col 6 of covariates
if (dat[1,]$species == "DO") {
covariates[,6] = 1}
else if (dat[1,]$species == "DM"){
covariates[,6] = 2}
else if (dat[1,]$species == "PB"){
covariates[,6] = 3}
else if (dat[1,]$species == "PP"){
covariates[,6] = 4}
else if (dat[1,]$species == "PF"){
covariates[,6] = 5}
else if (dat[1,]$species == "PE"){
covariates[,6] = 6}
else if (dat[1,]$species == "PM"){
covariates[,6] = 7}
else if (dat[1,]$species == "RM"){
covariates[,6] = 8}
else if (dat[1,]$species == "SH"){
covariates[,6] = 9}
else if (dat[1,]$species == "SF"){
covariates[,6] = 10}
else if (dat[1,]$species == "NAO"){
covariates[,6] = 11}
else if (dat[1,]$species == "OT"){
covariates[,6] = 12}
else if (dat[1,]$species == "OL"){
covariates[,6] = 13}
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
mark_df = concat_ch(capture_history, covariates)
return(mark_df)
}
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
periods = c(261:380)
exclosures = c(5, 7, 10, 16, 23, 24)
krat_excl = c(5, 7, 10, 16, 23, 24, 3, 6, 13, 15, 18, 19, 20, 21)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
data = subset(het, species == "DO")
dat = data
prd = periods
exclosures = krat_excl
breakpoint = Hgran_brkpt
noplacelikehome = function (dat, prd, exclosures, breakpoint){
### Create a set of MARK capture histories by home vs away from home
# Creates a movement history to be used in Mark. Matrix is filled in with zeroes (not captured) and later filled in
## 1 (stayed home), and 2 (away from home).
## Home is determined using the mean + 1 sd of the logged data.
# guild (1 = heteromyid granivore, 2 = cricetid granivore, 3 = folivore, 4 = carnivore)
# species (1 = DO, 2 = DM, 3 = PB, 4 = PP, 5 = PF, 6 = PE, 7 = PM, 8 = RM, 9 = SH, 10 = SF, 11 = NAO, 12 = OT, 13 = OL)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 6)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "guild", "species")
group = c(1,2,3) #represent the "group"
# record guild in col 5 of covariates
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 5] = 2}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,5] = 3 }
else {
covariates[,5] = 4}
# record species in col 6 of covariates
if (dat[1,]$species == "DO") {
covariates[,6] = 1}
else if (dat[1,]$species == "DM"){
covariates[,6] = 2}
else if (dat[1,]$species == "PB"){
covariates[,6] = 3}
else if (dat[1,]$species == "PP"){
covariates[,6] = 4}
else if (dat[1,]$species == "PF"){
covariates[,6] = 5}
else if (dat[1,]$species == "PE"){
covariates[,6] = 6}
else if (dat[1,]$species == "PM"){
covariates[,6] = 7}
else if (dat[1,]$species == "RM"){
covariates[,6] = 8}
else if (dat[1,]$species == "SH"){
covariates[,6] = 9}
else if (dat[1,]$species == "SF"){
covariates[,6] = 10}
else if (dat[1,]$species == "NAO"){
covariates[,6] = 11}
else if (dat[1,]$species == "OT"){
covariates[,6] = 12}
else if (dat[1,]$species == "OL"){
covariates[,6] = 13}
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
mark_df = concat_ch(capture_history, covariates)
return(mark_df)
}
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(DO_MARK)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
head(OL_MARK)
#write files to local folder
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F, quote = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.inp", row.names = F, col.names = F, quote = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.inp", row.names = F, col.names = F, quote = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.inp", row.names = F, col.names = F, quote = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.inp", row.names = F, col.names = F, quote = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.inp", row.names = F, col.names = F, quote = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.inp", row.names = F, col.names = F, quote = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.inp", row.names = F, col.names = F, quote = F)
allspp = rbind(DO_MARK, DM_MARK, PB_MARK, PP_MARK, PF_MARK, PE_MARK, PM_MARK, RM_MARK, SH_MARK, SF_MARK, NAO_MARK, OT_MARK, OL_MARK)
write.table(allspp, file = "mark_datafiles//all_mark.inp", row.names = F, col.names = F, quote = F)
ms_data <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
library(RMark)
ms_data <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
ms_data <- convert.inp("mark_datafiles//all_mark.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
periods
ms_process <- process.data(ms_data,model = "Multistrata",begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process)
ms_process <- process.data(ms_data,model = "Multistrata",begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process)
#---------------------------------------------------------------------------------
#          make dummy variables and covariates
#---------------------------------------------------------------------------------
# Add dummy variables for operating on specific states or transitions
# A = 1 (home), B = 2 (away)
# A to B and B to B, is risky
# A to A and B to A, is less risky (within home, "normal" movements)
# Surival probability given that the individual is in A
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strA = 0
ms_ddl$p$strA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strB = 0
ms_ddl$p$strB[ms_ddl$p$stratum == "2"] = 1
Snull <- list(formula=~1)           # null model, S is not dependent on strata
Sstrata <- list(formula=~stratum)   # S is dependent on strata (in A or in B)
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267]))
p277 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 277]))
p278 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 278]))
summary(ms_ddl)
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process)
# Surival probability given that the individual is in A
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strA = 0
ms_ddl$p$strA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strB = 0
ms_ddl$p$strB[ms_ddl$p$stratum == "2"] = 1
#--------------------------------------------------------------------------------
# TODO: Lots of work on building up the models!
# What is psi (transition probability) for each species/guild?
# What is  S (survival probability) for each species/guild?
# What is p (capture probability for each species/guild?
# Do psi and S significantly differ among species/guilds?
# Within a species/guild, do covariates (sex, body mass) influence psi and S?
#---------------------------------------------------------------------------------
#          Define model structures for S (survival probability)
#---------------------------------------------------------------------------------
Snull <- list(formula=~1)           # null model, S is not dependent on strata
Sstrata <- list(formula=~stratum)   # S is dependent on strata (in A or in B)
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267]))
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267]))
Snull <- list(formula = ~1)           # null model, S is not dependent on strata
Sstrata <- list(formula = ~stratum)   # S is dependent on strata (in A or in B)
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process)
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strA = 0
ms_ddl$p$strA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strB = 0
ms_ddl$p$strB[ms_ddl$p$stratum == "2"] = 1
Snull <- list(formula = ~1)           # null model, S is not dependent on strata
Sstrata <- list(formula = ~stratum)   # S is dependent on strata (in A or in B)
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267]))
Psistrata <- list(formula = ~stratum)
Sstrata_pstrata_Psistrata <- mark(ms_process,ms_ddl, model.parameters = list(S = Sstrata,  p = pstrata, Psi = Psistrata),
options = "SIMANNEAL")
Psistrata <- list(formula = ~stratum)
head(DO_MARK)
length(DO_MARK[1,1])
ch=DOMARK[1,1]
ch=DO_MARK[1,1]
ch
ch[1]
nchar(ch)
length(261:380)
Sguild <- list(formula = ~guild)  # Is this how to set up a model testing if S differs among guilds?
