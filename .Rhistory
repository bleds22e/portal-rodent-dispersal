# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
breakpoint = Hgran_brkpt
# record guild in dummy variables (cols 5:7)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
dim(capture_history)
dim(covariates)
tail(capture_history)
tail(covariates)
s = subset(covariates, unidsex == 1)
s = subset(covariates$unidsex == 1)
s = subset(covariates, unidsex == 1)
names(capture_history)
colnames(capture_history)
head(capture_history)
ch_matrix = capture_history
A <- data.frame(ch_matrix)
names(A)
v <- within(A,  id <- paste(names(A), sep="")
)
dv <- do.call(paste, c(A[c(names(A))], sep = ""))
dv
head(v)
head(dv)
concat <- do.call(paste, c(A[c(A(names))], sep = ""))
dv <- do.call(paste, c(A[c(names(A))], sep = ""))
concat <- do.call(paste, c(A[c(names(A))], sep = ""))
length(concat)
dim(concat)
is.vector(concat)
names(A)
b = names(A)
b
b = b[-115:120]
b = b[-120]
b
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
# A is a placeholder for the concatenated data (code from D. Koons)
A <- data.frame(ch_matrix)
concat <- do.call(paste, c(A[c(names(A))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(A)) # makes a vector of semicolons
mark_df <- cbind(concat,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
mark_df = concat_ch(capture_history, covariates)
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
# A is a placeholder for the concatenated data (code from D. Koons)
A <- data.frame(ch_matrix)
encounters <- do.call(paste, c(A[c(names(A))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(A)) # makes a vector of semicolons
mark_df <- cbind(encounters,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
ch_df <- data.frame(ch_matrix)
encounters <- do.call(paste, c(ch_df[c(names(ch_df))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(ch_df)) # makes a vector of semicolons
mark_df <- cbind(encounters,cov_matrix,semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
library(Rmark)
library(RMark)
install.packages("RMark")
library(RMark) #can't install on mac? Update R version?
write.table(DO_MARK, file = "MARK_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DO_MARK, file = "MARK_datafiles//do_mark.inp", row.names = F, col.names = F)
write.table(DO_MARK, file = "MARK_datafiles//do_mark2.inp", row.names = F, col.names = F)
write.table(DO_MARK, file = "mark_datafiles//do_mark2.inp", row.names = F, col.names = F)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(cov_matrix)
tags = unique(dat$tag)
capture_history = matrix(0, nrow = length(tags), ncol = length(prd))
covariates = matrix(0, nrow = length(tags), ncol = 7)
colnames(covariates) = c("male", "female", "unidsex", "sd_mass", "hgran", "cgran", "foli")
group = c(1,2,3) #represent the "group"
# record guild in dummy variables (cols 5:7)
# since data is imported by species, we only need to check the first row of data to grab the species name and decide what guild it is in
if (dat[1,]$species %in% list("DO", "DM", "PB", "PP", "PF")){
covariates[, 5] = 1 }
else if (dat[1,]$species %in% list("PE", "PM", "RM")){
covariates[, 6] = 1}
else if (dat[1,]$species %in% list("SH", "SF", "NAO")){
covariates[,7] = 1 }  #all zeros indicate insectivores
#loop through each tag to get individual-level data
for (t in 1:length(tags)) {
ind_dat = dat[which(dat$tag == tags[t]),] #get data for indiv with tag t
ind_dat = ind_dat[order(ind_dat$period),] #order chronologically
p1 = min(ind_dat$period) # first capture period
index = match(p1, prd) # match the period with the index number for the list of periods (will correspond to col num in matrix)
capture_history[t,index] = 1  #mark first capture with 1 ("home")
sex = ind_dat[1,]$sex # don't need to acct for disputes in sex b/c should be already deleted (in flagged data fxn)
if (sex == "M") {
covariates[t,1] = 1 }
else if (sex == "F") {
covariates[t,2] = 1 }
else {
covariates[t,3] = 1 }
sd_mass = sd_avg_mass(dat, ind_dat) # record standard deviations away from species average mass
covariates[t,4] = sd_mass
for (i in 1:nrow(ind_dat)){ #record capture history data
if (i+1 <= nrow(ind_dat)){
meters = sqrt((ind_dat[i,8]-ind_dat[i+1,8])**2 + (ind_dat[i,7]-ind_dat[i+1,7])**2)
pnext = ind_dat[i+1,]$period #next capture period, where the distance will be recorded in the matrix
if (meters <= breakpoint) {
dist = 1 #captured close to "home"
}
else if (meters > breakpoint) {
dist = 2 #captured far from "home"
}
if (ind_dat[i+1,]$plot %in% exclosures){ #was it captured on an exclosure?
covariates[t,group] = covariates[t,group]*-1
}
index = match(pnext, prd)
capture_history[t,index] = dist #mark subsequent captures
}
}
}
dim(capture_history)
dim(covariates)
covariates
concat_ch = function (ch_matrix, cov_matrix){
#concatenates columns representing capture histories, to be used in later MARK analyses
ch_df <- data.frame(ch_matrix)
encounters <- do.call(paste, c(ch_df[c(names(ch_df))], sep = '')) # makes a vector of all the capture histories
semicol <- rep(";", nrow(ch_df)) # makes a vector of semicolons
mark_df <- cbind(encounters, cov_matrix, semicol) # binds the capture, cov, and semicolon data together into a dataframe
return (mark_df)
}
mark_df = concat_ch(capture_history, covariates)
head(mark_df)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
source("movement_fxns.r")
mark_df = concat_ch(capture_history, covariates)
source("C://Users//sarah//Documents//GitHub//portal-rodent-dispersal//movement_fxns.R")
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
head(DO_MARK)
dim(DO_MARK)
Hgran(brkpt)
Hgran_brkpt
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DM_MARK, file = "MARK_datafiles//dm_mark.txt", row.names = F, col.names = F)
write.table(PB_MARK, file = "MARK_datafiles//pb_mark.txt", row.names = F, col.names = F)
write.table(PP_MARK, file = "MARK_datafiles//pp_mark.txt", row.names = F, col.names = F)
write.table(PF_MARK, file = "MARK_datafiles//pf_mark.txt", row.names = F, col.names = F)
write.table(PE_MARK, file = "MARK_datafiles//pe_mark.txt", row.names = F, col.names = F)
write.table(PM_MARK, file = "MARK_datafiles//pm_mark.txt", row.names = F, col.names = F)
write.table(RM_MARK, file = "MARK_datafiles//rm_mark.txt", row.names = F, col.names = F)
write.table(SH_MARK, file = "MARK_datafiles//sh_mark.txt", row.names = F, col.names = F)
write.table(SF_MARK, file = "MARK_datafiles//sf_mark.txt", row.names = F, col.names = F)
write.table(NAO_MARK, file = "MARK_datafiles//nao_mark.txt", row.names = F, col.names = F)
write.table(OT_MARK, file = "MARK_datafiles//ot_mark.txt", row.names = F, col.names = F)
write.table(OL_MARK, file = "MARK_datafiles//ol_mark.txt", row.names = F, col.names = F)
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.txt", row.names = F, col.names = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.txt", row.names = F, col.names = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.txt", row.names = F, col.names = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.txt", row.names = F, col.names = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.txt", row.names = F, col.names = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.txt", row.names = F, col.names = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.txt", row.names = F, col.names = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.txt", row.names = F, col.names = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.txt", row.names = F, col.names = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.txt", row.names = F, col.names = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.txt", row.names = F, col.names = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.txt", row.names = F, col.names = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.txt", row.names = F, col.names = F)
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.inp", row.names = F, col.names = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.inp", row.names = F, col.names = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.inp", row.names = F, col.names = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.inp", row.names = F, col.names = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.inp", row.names = F, col.names = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.inp", row.names = F, col.names = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.inp", row.names = F, col.names = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.inp", row.names = F, col.names = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.inp", row.names = F, col.names = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.inp", row.names = F, col.names = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.inp", row.names = F, col.names = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.inp", row.names = F, col.names = F)
MSdata <- convert.inp("do_mark.inp",
group.df=data.frame(sex=c("male","female","unidsex")))
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")))
head(DO_MARK)
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")),
covariates = data.frame(mass = "sd_mass", guild = c("hgran", "cgran", "foli", "insec")))
MSdata <- convert.inp("mark_datafiles//do_mark.inp", group.df=data.frame(sex=c("male","female","unidsex")),
covariates = data.frame(mass = "sd_mass", guild = c("hgran", "cgran", "foli")))
ls()
data(dipper)
example(dipper)
summary(dipper)
dipper[1:5]
dipper[1:5,]
dim(dipper)
plot(density(Hgran), main = 'Portal movement by guild', xlab = 'meters', lwd = 2, col = 'hotpink2')
lines(density(Cgran), col = 'deepskyblue3', lwd = 3, lty = 6)
lines(density(naometers), col = 'indianred4', lwd = 4, lty = 3)
lines(density(foli), col = 'mediumpurple4', lwd = 4, lty = 3)
lines(density(insectiv), col = 'darkgreen', lwd = 2)
legend('topright', c('Hgran', 'Neotoma', 'foliv', 'Cgran', 'insec'), bty = 'n', lty = c(1,3,6,3,1), lwd = 5, seg.len = 2,
col = c('hotpink2', 'indianred4', 'mediumpurple4', 'deepskyblue3', 'darkgreen'))
#### Make an occupancy plot for 2000-2009 (similar to Morgan) #######FIX ME - REFERS TO OLD DATAFRAMES
#proportion of years they were seen in
doyr = length(unique(DO$yr))/10; dmyr = length(unique(DM$yr))/10; pfyr = length(unique(PF$year))/10; ppyr = length(unique(PP$year))/10; pbyr = length(unique(PB$year))/10
peyr = length(unique(PE$yr))/10; pmyr = length(unique(PM$yr))/10; rmyr = length(unique(RM$yr))/10
unique(cricet[cricet$species == "PE", 2])
head(cricet)
unique(cricet[species=="DO",]$yr)
unique(cricet[cricet$species=="PE",]$yr)
unique(cricet[cricet$species=="PE",]$yr)/10
length(unique(cricet[cricet$species=="PE",]$yr))/10
doyr = length(unique(het[het$species=="DO",]$yr))/10; dmyr = length(unique(het[het$species=="DM",]$yr))/10; pfyr = length(unique(het[het$species=="PF",]$yr))/10; ppyr = length(unique(het[het$species=="PP",]$yr))/10; pbyr = length(unique(het[het$species=="PB",]$yr))/10
peyr = length(unique(cricet[cricet$species=="PE",]$yr))/10; pmyr = length(unique(cricet[cricet$species=="PM",]$yr))/10; rmyr = length(unique(cricet[cricet$species=="RM",]$yr))/10
shyr = length(unique(foliv[foliv$species=="SH",]$yr))/10; sfyr = length(unique(foliv[foliv$species=="SF",]$yr))/10; naoyr = length(unique(foliv[foliv$species=="NAO",]$yr))/10
otyr = length(unique(insec[insec$species=="OT",]$yr))/10; olyr = length(unique(insec[insec$species=="OL",]$yr))/10
doyr
peyr
pmyr
shyr
sfyr
otyr
olyr
domo = mean_win_yr_occ(subset(het, species == "DO"))
plot_freq_by_prd(subset(het, species == PB), "PB")
library(calibrate)
library(fields)
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
het = read.csv("data//heteromyids_2000-2009.csv")   # DO, DM, PB, PP, PF
cricet = read.csv("data//cricetids_2000-2009.csv")  # PE, PM, RM
foliv = read.csv("data//folivores_2000-2009.csv")   # SH, SF, NA (as NAO)
insec = read.csv("data//onychomys_2000-2009.csv")   # OT, OL
het$tag = as.character(het$tag); cricet$tag = as.character(cricet$tag); foliv$tag = as.character(foliv$tag); insec$tag = as.character(insec$tag)
het$species = as.character(het$species); cricet$species = as.character(cricet$species); foliv$species = as.character(foliv$species); insec$species = as.character(insec$species)
het$sex = as.character(het$sex); cricet$sex = as.character(cricet$sex); foliv$sex = as.character(foliv$sex); insec$sex = as.character(insec$sex)
het = read.csv("rawdata//heteromyids_2000-2009.csv")   # DO, DM, PB, PP, PF
cricet = read.csv("rawdata//cricetids_2000-2009.csv")  # PE, PM, RM
foliv = read.csv("rawdata//folivores_2000-2009.csv")   # SH, SF, NA (as NAO)
insec = read.csv("rawdata//onychomys_2000-2009.csv")   # OT, OL
# # # list of dataframes                                                 WORKS NOW, TO USE? OR NOT TO USE?
# datLS = list(het, cricet, foliv, insec)
# names(datLS) = c('het','cricet', 'foliv', 'insec')
# for (df in seq_along(datLS)) datLS[[df]]$tag = as.character(datLS[[df]]$tag)
# change some cols from factor to character class
het$tag = as.character(het$tag); cricet$tag = as.character(cricet$tag); foliv$tag = as.character(foliv$tag); insec$tag = as.character(insec$tag)
het$species = as.character(het$species); cricet$species = as.character(cricet$species); foliv$species = as.character(foliv$species); insec$species = as.character(insec$species)
het$sex = as.character(het$sex); cricet$sex = as.character(cricet$sex); foliv$sex = as.character(foliv$sex); insec$sex = as.character(insec$sex)
# give untagged individuals a unique 7-number code
het = id_unknowns(het, 16); cricet = id_unknowns(cricet, 16); foliv = id_unknowns(foliv, 16); insec = id_unknowns(insec, 16)
# get rid of 'bad data'; deletes data that is not a pit tag, where sex is inconsistent or where species is inconsistent.
het = subsetDat(het); cricet = subsetDat(cricet); foliv = subsetDat(foliv); insec = subsetDat(insec)
# get a vector unique tags, then get a vector of distances moved for all recaptured individuals, by SPECIES
#heteromyids
dmtags = unique(het[het$species == "DM",]$tag); dotags = unique(het[het$species == "DO",]$tag); pbtags = unique(het[het$species == "PB",]$tag); pptags = unique(het[het$species == "PP",]$tag); pftags = unique(het[het$species == "PF",]$tag)
dmmeters = distance_moved(het[het$species == "DM",], dmtags); dometers = distance_moved(het[het$species == "DO",], dotags); pbmeters = distance_moved(het[het$species == "PB",], pbtags); ppmeters = distance_moved(het[het$species == "PP",], pptags); pfmeters = distance_moved(het[het$species == "PF",], pftags)
#cricetids
petags = unique(cricet[cricet$species == "PE",]$tag); pmtags = unique(cricet[cricet$species == "PM",]$tag); rmtags = unique(cricet[cricet$species == "RM",]$tag)
pemeters = distance_moved(cricet[cricet$species == "PE",], petags); pmmeters = distance_moved(cricet[cricet$species == "PM",], pmtags); rmmeters = distance_moved(cricet[cricet$species == "RM",], rmtags)
#folivores
shtags = unique(foliv[foliv$species == "SH",]$tag); sftags = unique(foliv[foliv$species == "SF",]$tag); naotags = unique(foliv[foliv$species == "NAO",]$tag)
shmeters = distance_moved(foliv[foliv$species == "SH",], shtags); sfmeters = distance_moved(foliv[foliv$species == "SF",], sftags); naometers = distance_moved(foliv[foliv$species == "NAO",], naotags)
#insectivores
oltags = unique(insec[insec$species == "OL",]$tag); ottags = unique(insec[insec$species == "OT",]$tag)
olmeters = distance_moved(insec[insec$species == "OL",], oltags); otmeters = distance_moved(insec[insec$species == "OT",], ottags)
# concatenate distance vectors for recaptured individuals by GUILD
Hgran = c(dmmeters, dometers, pbmeters, ppmeters, pfmeters)
Cgran = c(pemeters, pmmeters, rmmeters)
foli = c(shmeters, sfmeters) #separate NAO because they use different strategy - MIDDENS
insectiv = c(otmeters, olmeters)
head(foli)
is.numeric(foli)
write(Hgran, "G://distances//Hgran.txt", sep="\n")
write(Cgran, "G://distances//Cgran.txt", sep="\n")
write(foli, "G://distances//foli.txt", sep="\n")
write(naometers, "G://distances//naometers.txt", sep="\n")
write(insectiv, "G://distances//insectiv.txt", sep="\n")
write(dometers, "G://distances//dometers.txt", sep="\n")
write(pemeters, "G://distances//pemeters.txt", sep="\n")
write(shmeters, "G://distances//shmeters.txt", sep="\n")
write(otmeters, "G://distances//otmeters.txt", sep="\n")
write(ppmeters, "G://distances//ppmeters.txt", sep="\n")
write(pfmeters, "G://distances//pfmeters.txt", sep="\n")
library(calibrate)
library(fields)
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
het = read.csv("rawdata//heteromyids_2000-2009.csv")   # DO, DM, PB, PP, PF
cricet = read.csv("rawdata//cricetids_2000-2009.csv")  # PE, PM, RM
foliv = read.csv("rawdata//folivores_2000-2009.csv")   # SH, SF, NA (as NAO)
insec = read.csv("rawdata//onychomys_2000-2009.csv")   # OT, OL
# # # list of dataframes                                                 WORKS NOW, TO USE? OR NOT TO USE?
# datLS = list(het, cricet, foliv, insec)
# names(datLS) = c('het','cricet', 'foliv', 'insec')
# for (df in seq_along(datLS)) datLS[[df]]$tag = as.character(datLS[[df]]$tag)
# change some cols from factor to character class
het$tag = as.character(het$tag); cricet$tag = as.character(cricet$tag); foliv$tag = as.character(foliv$tag); insec$tag = as.character(insec$tag)
het$species = as.character(het$species); cricet$species = as.character(cricet$species); foliv$species = as.character(foliv$species); insec$species = as.character(insec$species)
het$sex = as.character(het$sex); cricet$sex = as.character(cricet$sex); foliv$sex = as.character(foliv$sex); insec$sex = as.character(insec$sex)
# give untagged individuals a unique 7-number code
het = id_unknowns(het, 16); cricet = id_unknowns(cricet, 16); foliv = id_unknowns(foliv, 16); insec = id_unknowns(insec, 16)
# get rid of 'bad data'; deletes data that is not a pit tag, where sex is inconsistent or where species is inconsistent.
het = subsetDat(het); cricet = subsetDat(cricet); foliv = subsetDat(foliv); insec = subsetDat(insec)
# get a vector unique tags, then get a vector of distances moved for all recaptured individuals, by SPECIES
#heteromyids
dmtags = unique(het[het$species == "DM",]$tag); dotags = unique(het[het$species == "DO",]$tag); pbtags = unique(het[het$species == "PB",]$tag); pptags = unique(het[het$species == "PP",]$tag); pftags = unique(het[het$species == "PF",]$tag)
dmmeters = distance_moved(het[het$species == "DM",], dmtags); dometers = distance_moved(het[het$species == "DO",], dotags); pbmeters = distance_moved(het[het$species == "PB",], pbtags); ppmeters = distance_moved(het[het$species == "PP",], pptags); pfmeters = distance_moved(het[het$species == "PF",], pftags)
#cricetids
petags = unique(cricet[cricet$species == "PE",]$tag); pmtags = unique(cricet[cricet$species == "PM",]$tag); rmtags = unique(cricet[cricet$species == "RM",]$tag)
pemeters = distance_moved(cricet[cricet$species == "PE",], petags); pmmeters = distance_moved(cricet[cricet$species == "PM",], pmtags); rmmeters = distance_moved(cricet[cricet$species == "RM",], rmtags)
#folivores
shtags = unique(foliv[foliv$species == "SH",]$tag); sftags = unique(foliv[foliv$species == "SF",]$tag); naotags = unique(foliv[foliv$species == "NAO",]$tag)
shmeters = distance_moved(foliv[foliv$species == "SH",], shtags); sfmeters = distance_moved(foliv[foliv$species == "SF",], sftags); naometers = distance_moved(foliv[foliv$species == "NAO",], naotags)
#insectivores
oltags = unique(insec[insec$species == "OL",]$tag); ottags = unique(insec[insec$species == "OT",]$tag)
olmeters = distance_moved(insec[insec$species == "OL",], oltags); otmeters = distance_moved(insec[insec$species == "OT",], ottags)
# concatenate distance vectors for recaptured individuals by GUILD
Hgran = c(dmmeters, dometers, pbmeters, ppmeters, pfmeters)
Cgran = c(pemeters, pmmeters, rmmeters)
foli = c(shmeters, sfmeters) #separate NAO because they use different strategy - MIDDENS
insectiv = c(otmeters, olmeters)
Hgran_brkpt = mean(log(Hgran)) + sd(log(Hgran))
Hgran_brkpt
head(Hgran)
log(Hgran)
mean(log(Hgran))
log10(Hgran)
Hgran_brkpt = mean(log1p(Hgran)) + sd(log1p(Hgran))
Hgran_brkpt
log(1)
exp(log(1))
log(4)
exp(1.386294)
exp(log(4))
log1p(1)
log1p(0)
expm1(log1p(0))
log1p(100)
expm1(4.615121)
Hgran_brkpt = expm1(mean(log1p(Hgran)) + sd(log1p(Hgran)))
Hgran_brkpt
log2(0)
Cgran_brkpt = expm1(mean(log1p(Cgran)) + sd(log1p(Cgran)))
Cgran_brkpt
Cgran_brkpt = mean(Cgran) + sd(Cgran)
Cgran
Cgran_brkpt = mean(Cgran) + sd(Cgran)
Cgran_brkpt
foli_brkpt = expm1(mean(log1p(foli)) + sd(log1p(foli)))
nao_brkpt = expm1(mean(log1p(naometers)) + sd(log1p(naometers)))
ins_brkpt = expm1(mean(log1p(insectiv)) + sd(log1p(insectiv)))
foli_brkpt
nao_brkpt
ins_brkpt
Cgran_brkpt = expm1(mean(log1p(Cgran)) + sd(log1p(Cgran)))
Cgran_brkpt
nano = mean(naometers) + sd(naometers)
nano
#create vector of breaks, incrementing by 6 meters (represents approx. 1 stake) since data are not actually continuous
v6 = seq(-3,500,6)
Hgcount = hist(Hgran, breaks = v6, col = 'gray60', xlim = c(0,500), ylim = c(0, 2500), main = 'Heteromyids - PF, PP, PB, DO, DM')
xline(Hgran_brkpt, lwd = 2, col = "indianred")
Cgcount = hist(Cgran, breaks = v6, col = 'gray60', xlim = c(0,500), ylim = c(0,20), main = 'Cricetids - PE, PM, RM')
xline(Cgran_brkpt, lwd = 2, col = "indianred")
focount = hist(foli, breaks = v6, col = 'gray60', xlim = c(0,500), main = 'folivores - SH, SF')
xline(foli_brkpt, lwd = 2, col = "indianred")
nacount = hist(naometers, breaks = v6, col = 'gray60', xlim = c(0,500), main = 'neotoma - NA')
xline(nao_brkpt, lwd = 2, col = "indianred")
incount = hist(insectiv, breaks = v6, col = 'gray60', xlim = c(0,500), ylim = c(0,80), main = 'insectivores - OT, OL')
xline(ins_brkpt, lwd = 2, col = "indianred")
periods = c(261:380)
exclosures = c(5, 7, 10, 16, 23, 24)
krat_excl = c(5, 7, 10, 16, 23, 24, 3, 6, 13, 15, 18, 19, 20, 21)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
#write files to local folder for MARK analysis
write.table(DO_MARK, file = "mark_datafiles//do_mark.inp", row.names = F, col.names = F)
write.table(DM_MARK, file = "mark_datafiles//dm_mark.inp", row.names = F, col.names = F)
write.table(PB_MARK, file = "mark_datafiles//pb_mark.inp", row.names = F, col.names = F)
write.table(PP_MARK, file = "mark_datafiles//pp_mark.inp", row.names = F, col.names = F)
write.table(PF_MARK, file = "mark_datafiles//pf_mark.inp", row.names = F, col.names = F)
write.table(PE_MARK, file = "mark_datafiles//pe_mark.inp", row.names = F, col.names = F)
write.table(PM_MARK, file = "mark_datafiles//pm_mark.inp", row.names = F, col.names = F)
write.table(RM_MARK, file = "mark_datafiles//rm_mark.inp", row.names = F, col.names = F)
write.table(SH_MARK, file = "mark_datafiles//sh_mark.inp", row.names = F, col.names = F)
write.table(SF_MARK, file = "mark_datafiles//sf_mark.inp", row.names = F, col.names = F)
write.table(NAO_MARK, file = "mark_datafiles//nao_mark.inp", row.names = F, col.names = F)
write.table(OT_MARK, file = "mark_datafiles//ot_mark.inp", row.names = F, col.names = F)
write.table(OL_MARK, file = "mark_datafiles//ol_mark.inp", row.names = F, col.names = F)
