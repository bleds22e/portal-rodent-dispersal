ms_results
c = 0000000000000000000000000000000000100000000000000000000000000
nchar(c)
b = c
c = 0000000000000000000000000000000000100000000000000000000000000
length(c)
is.character(c)
as.character(c)
c = as.character(c)
nchar(c)
library(calibrate)
library(fields)
#---------------------------------------------------------------------------------
#          setup - select wd, import data, source code,  file to collect results
#---------------------------------------------------------------------------------
#set working directory
wd = "C://Users//sarah//Documents//GitHub//portal-rodent-dispersal"
setwd(wd)
source("movement_fxns.R")
#import the data by guild
het = read.csv("rawdata//heteromyids_2000-2009.csv")   # DO, DM, PB, PP, PF
cricet = read.csv("rawdata//cricetids_2000-2009.csv")  # PE, PM, RM
foliv = read.csv("rawdata//folivores_2000-2009.csv")   # SH, SF, NA (as NAO)
insec = read.csv("rawdata//onychomys_2000-2009.csv")   # OT, OL
# change some cols from factor to character class
het$tag = as.character(het$tag); cricet$tag = as.character(cricet$tag); foliv$tag = as.character(foliv$tag); insec$tag = as.character(insec$tag)
het$species = as.character(het$species); cricet$species = as.character(cricet$species); foliv$species = as.character(foliv$species); insec$species = as.character(insec$species)
het$sex = as.character(het$sex); cricet$sex = as.character(cricet$sex); foliv$sex = as.character(foliv$sex); insec$sex = as.character(insec$sex)
# give untagged individuals a unique 7-number code
het = id_unknowns(het, 16); cricet = id_unknowns(cricet, 16); foliv = id_unknowns(foliv, 16); insec = id_unknowns(insec, 16)
# get rid of 'bad data'; deletes data that is not a pit tag, where sex is inconsistent or where species is inconsistent.
het = subsetDat(het); cricet = subsetDat(cricet); foliv = subsetDat(foliv); insec = subsetDat(insec)
#---------------------------------------------------------------------------------
#          calculate life-history details - reproduction, temporal persistence
#---------------------------------------------------------------------------------
#average proportion of reproductive females by month across all years
doreprd = mean_mo_repro(subset(het, species == "DO" & sex == "F")); dmreprd = mean_mo_repro(subset(het, species == "DM" & sex == "F")); pfreprd = mean_mo_repro(subset(het, species == "PF" & sex == "F")); ppreprd = mean_mo_repro(subset(het, species == "PP" & sex == "F")); pbreprd = mean_mo_repro(subset(het, species == "PB" & sex == "F"));
pereprd = mean_mo_repro(subset(cricet, species == "PE" & sex == "F")); pmreprd = mean_mo_repro(subset(cricet, species == "PM" & sex == "F")); rmreprd = mean_mo_repro(subset(cricet, species == "RM" & sex == "F"))
shreprd = mean_mo_repro(subset(foliv, species == "SH" & sex == "F")); sfreprd = mean_mo_repro(subset(foliv, species == "SF" & sex == "F")); naoreprd = mean_mo_repro(subset(foliv, species == "NAO" & sex == "F"))
otreprd = mean_mo_repro(subset(insec, species == "OT" & sex == "F")); olreprd = mean_mo_repro(subset(insec, species == "OL" & sex == "F"))
# proportion of reproductive females by month and year
doreprdyr = mo_repro(subset(het, species == "DO" & sex == "F")); dmreprdyr = mo_repro(subset(het, species == "DM" & sex == "F")); pfreprdyr = mo_repro(subset(het, species == "PF" & sex == "F")); ppreprdyr = mo_repro(subset(het, species == "PP" & sex == "F")); pbreprdyr = mo_repro(subset(het, species == "PB" & sex == "F"));
pereprdyr = mo_repro(subset(cricet, species == "PE" & sex == "F")); pmreprdyr = mo_repro(subset(cricet, species == "PM" & sex == "F")); rmreprdyr = mo_repro(subset(cricet, species == "RM" & sex == "F"))
shreprdyr = mo_repro(subset(foliv, species == "SH" & sex == "F")); sfreprdyr = mo_repro(subset(foliv, species == "SF" & sex == "F")); naoreprdyr = mo_repro(subset(foliv, species == "NAO" & sex == "F"))
otreprdyr = mo_repro(subset(insec, species == "OT" & sex == "F")); olreprdyr = mo_repro(subset(insec, species == "OL" & sex == "F"))
#track the number of times females uniquely reproduce within years
doirep = indiv_repro(subset(het, species == "DO" & sex == "F")); dmirep = indiv_repro(subset(het, species == "DM" & sex == "F")); pfirep = indiv_repro(subset(het, species == "PF" & sex == "F")); ppirep = indiv_repro(subset(het, species == "PP" & sex == "F")); pbirep = indiv_repro(subset(het, species == "PB" & sex == "F"));
peirep = indiv_repro(subset(cricet, species == "PE" & sex == "F")); pmirep = indiv_repro(subset(cricet, species == "PM" & sex == "F")); rmirep = indiv_repro(subset(cricet, species == "RM" & sex == "F"))
shirep = indiv_repro(subset(foliv, species == "SH" & sex == "F")); sfirep = indiv_repro(subset(foliv, species == "SF" & sex == "F")); naoirep = indiv_repro(subset(foliv, species == "NAO" & sex == "F"))
otirep = indiv_repro(subset(insec, species == "OT" & sex == "F")); olirep = indiv_repro(subset(insec, species == "OL" & sex == "F"))
#proportion of years they were seen in
doyr = length(unique(het[het$species=="DO",]$yr))/10; dmyr = length(unique(het[het$species=="DM",]$yr))/10; pfyr = length(unique(het[het$species=="PF",]$yr))/10; ppyr = length(unique(het[het$species=="PP",]$yr))/10; pbyr = length(unique(het[het$species=="PB",]$yr))/10
peyr = length(unique(cricet[cricet$species=="PE",]$yr))/10; pmyr = length(unique(cricet[cricet$species=="PM",]$yr))/10; rmyr = length(unique(cricet[cricet$species=="RM",]$yr))/10
shyr = length(unique(foliv[foliv$species=="SH",]$yr))/10; sfyr = length(unique(foliv[foliv$species=="SF",]$yr))/10; naoyr = length(unique(foliv[foliv$species=="NAO",]$yr))/10
otyr = length(unique(insec[insec$species=="OT",]$yr))/10; olyr = length(unique(insec[insec$species=="OL",]$yr))/10
# average number of months they were seen in during years in which they were present
domo = mean_win_yr_occ(subset(het, species == "DO")); dmmo = mean_win_yr_occ(subset(het, species == "DM")); pfmo = mean_win_yr_occ(subset(het, species == "PF")); ppmo = mean_win_yr_occ(subset(het, species == "PP")); pbmo = mean_win_yr_occ(subset(het, species == "PB"))
pemo = mean_win_yr_occ(subset(cricet, species == "PE")); pmmo = mean_win_yr_occ(subset(cricet, species == "PM")); rmmo = mean_win_yr_occ(subset(cricet, species == "RM"))
shmo = mean_win_yr_occ(subset(foliv, species == "SH")); sfmo = mean_win_yr_occ(subset(foliv, species == "SF")); naomo = mean_win_yr_occ(subset(foliv, species == "NAO"))
otmo = mean_win_yr_occ(subset(insec, species == "OT")); olmo = mean_win_yr_occ(subset(insec, species == "OL"))
#mean abundance within all years
doabun = allyrs_abun(subset(het, species == "DO")); dmabun = allyrs_abun(subset(het, species == "DM")); pfabun = allyrs_abun(subset(het, species == "PF")); ppabun = allyrs_abun(subset(het, species == "PP")); pbabun = allyrs_abun(subset(het, species == "PB"))
peabun = allyrs_abun(subset(cricet, species == "PE")); pmabun = allyrs_abun(subset(cricet, species == "PM")); rmabun = allyrs_abun(subset(cricet, species == "RM"))
shabun = allyrs_abun(subset(foliv, species == "SH")); sfabun = allyrs_abun(subset(foliv, species == "SF")); naoabun = allyrs_abun(subset(foliv, species == "NAO"))
otabun = allyrs_abun(subset(insec, species == "OT")); olabun = allyrs_abun(subset(insec, species == "OL"))
abuns = cbind(doabun, dmabun, pbabun, ppabun, pfabun, peabun, pmabun, rmabun, shabun, sfabun, naoabun, otabun, olabun)
#---------------------------------------------------------------------------------
#          calculate movement distances, multi-state capture histories
#---------------------------------------------------------------------------------
# get a vector unique tags, then get a vector of distances moved for all recaptured individuals, by SPECIES
#heteromyids
dmtags = unique(het[het$species == "DM",]$tag); dotags = unique(het[het$species == "DO",]$tag); pbtags = unique(het[het$species == "PB",]$tag); pptags = unique(het[het$species == "PP",]$tag); pftags = unique(het[het$species == "PF",]$tag)
dmmeters = distance_moved(het[het$species == "DM",], dmtags); dometers = distance_moved(het[het$species == "DO",], dotags); pbmeters = distance_moved(het[het$species == "PB",], pbtags); ppmeters = distance_moved(het[het$species == "PP",], pptags); pfmeters = distance_moved(het[het$species == "PF",], pftags)
#cricetids
petags = unique(cricet[cricet$species == "PE",]$tag); pmtags = unique(cricet[cricet$species == "PM",]$tag); rmtags = unique(cricet[cricet$species == "RM",]$tag)
pemeters = distance_moved(cricet[cricet$species == "PE",], petags); pmmeters = distance_moved(cricet[cricet$species == "PM",], pmtags); rmmeters = distance_moved(cricet[cricet$species == "RM",], rmtags)
#folivores
shtags = unique(foliv[foliv$species == "SH",]$tag); sftags = unique(foliv[foliv$species == "SF",]$tag); naotags = unique(foliv[foliv$species == "NAO",]$tag)
shmeters = distance_moved(foliv[foliv$species == "SH",], shtags); sfmeters = distance_moved(foliv[foliv$species == "SF",], sftags); naometers = distance_moved(foliv[foliv$species == "NAO",], naotags)
#insectivores
oltags = unique(insec[insec$species == "OL",]$tag); ottags = unique(insec[insec$species == "OT",]$tag)
olmeters = distance_moved(insec[insec$species == "OL",], oltags); otmeters = distance_moved(insec[insec$species == "OT",], ottags)
# concatenate distance vectors for recaptured individuals by GUILD
Hgran = c(dmmeters, dometers, pbmeters, ppmeters, pfmeters)
Cgran = c(pemeters, pmmeters, rmmeters)
foli = c(shmeters, sfmeters) #separate NAO because they use different strategy - MIDDENS
insectiv = c(otmeters, olmeters)
# find breakpoints to use in MARK data structure for future analyses
# data reasonably well fits a lognormal distribution (eyeball and J. Powell)
# breakpoint = mean(logdata) + sd(logdata) of all the distances traveled by recaptured individuals
# using log1p, and back transforming using expm1 should solve the problem of lots of zeros
Hgran_brkpt = expm1(mean(log1p(Hgran)) + sd(log1p(Hgran)))
Cgran_brkpt = expm1(mean(log1p(Cgran)) + sd(log1p(Cgran)))
foli_brkpt = expm1(mean(log1p(foli)) + sd(log1p(foli)))
nao_brkpt = expm1(mean(log1p(naometers)) + sd(log1p(naometers)))
ins_brkpt = expm1(mean(log1p(insectiv)) + sd(log1p(insectiv)))
# Get MARK capture histories
## add unique breakpoints for each species based on histogram data of movement
periods = c(261:380)
exclosures = c(5, 7, 10, 16, 23, 24)
krat_excl = c(5, 7, 10, 16, 23, 24, 3, 6, 13, 15, 18, 19, 20, 21)
DO_MARK = noplacelikehome(subset(het, species == "DO"), periods, krat_excl, Hgran_brkpt)
DM_MARK = noplacelikehome(subset(het, species == "DM"), periods, krat_excl, Hgran_brkpt)
PB_MARK = noplacelikehome(subset(het, species == "PB"), periods, exclosures, Hgran_brkpt)
PP_MARK = noplacelikehome(subset(het, species == "PP"), periods, exclosures, Hgran_brkpt)
PF_MARK = noplacelikehome(subset(het, species == "PF"), periods, exclosures, Hgran_brkpt)
PE_MARK = noplacelikehome(subset(cricet, species == "PE"), periods, exclosures, Cgran_brkpt)
PM_MARK = noplacelikehome(subset(cricet, species == "PM"), periods, exclosures, Cgran_brkpt)
RM_MARK = noplacelikehome(subset(cricet, species == "RM"), periods, exclosures, Cgran_brkpt)
SH_MARK = noplacelikehome(subset(foliv, species == "SH"), periods, exclosures, foli_brkpt)
SF_MARK = noplacelikehome(subset(foliv, species == "SF"), periods, exclosures, foli_brkpt)
NAO_MARK = noplacelikehome(subset(foliv, species == "NAO"), periods, exclosures, nao_brkpt)
OT_MARK = noplacelikehome(subset(insec, species == "OT"), periods, exclosures, ins_brkpt)
OL_MARK = noplacelikehome(subset(insec, species == "OL"), periods, exclosures, ins_brkpt)
dim(OL_MARK)
dim(SH_MARK)
dim(SF_MARK)
dim(RM_MARK)
dim(PM_MARK)
dim(PF_MARK)
dim(NAO_MARK)
practice3 = rbind(NAO_MARK, OL_MARK, PM_MARK)
dim(PE_MARK)
write.table(practice3, file = "mark_datafiles//practice3.inp", row.names = F, col.names = F, quote = F)
ms_data <- convert.inp("mark_datafiles//practice3.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
head(ms_data)
tail(ms_data)
dim(ms_data)
118+72+46
is.factor(guild)
is.factor(ms_data$guild)
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process)
summary(ms_process)
summary(ms_ddl)
# Surival probability given that the individual is in A
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strataA = 0
ms_ddl$p$strataA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strataB = 0
ms_ddl$p$strataB[ms_ddl$p$stratum == "2"] = 1
Snull <- list(formula = ~1)           # null model, S is not dependent on strata
Sstrata <- list(formula = ~stratum)   # S is dependent on strata (in A or in B)
Sguild <- list(formula = ~as.factor(guild))  # testing if S differs among guilds?
Sspecies <- list(formula = ~as.factor(species)) # test for differences among species
#---------------------------------------------------------------------------------
#          Define model structures for p (capture probability)
#---------------------------------------------------------------------------------
# fix recapture probabilities for unsampled or omitted months
#    skipped_periods = c(267, 277, 278, 283, 284, 300, 311, 313, 314, 318, 321, 323, 337, 339, 344, 351): p = 0
# select periods that were omitted from the study - untrapped
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267,]))
p277 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 277,]))
p278 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 278,]))
p283 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 283,]))
p284 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 284,]))
p300 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 300,]))
p311 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 311,]))
p313 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 313,]))
p314 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 314,]))
p318 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 318,]))
p321 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 321,]))
p323 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 323,]))
p337 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 337,]))
p339 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 339,]))
p344 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 344,]))
p351 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 351,]))
# set those periods to p = 0, because they *can't* be anything else
p267val = rep(0, length(p267))
p277val = rep(0, length(p277))
p278val = rep(0, length(p278))
p283val = rep(0, length(p283))
p284val = rep(0, length(p284))
p300val = rep(0, length(p300))
p311val = rep(0, length(p311))
p313val = rep(0, length(p313))
p314val = rep(0, length(p314))
p318val = rep(0, length(p318))
p321val = rep(0, length(p321))
p323val = rep(0, length(p323))
p337val = rep(0, length(p337))
p339val = rep(0, length(p339))
p344val = rep(0, length(p344))
p351val = rep(0, length(p351))
# look for effects on recapture probability, given that some p are fixed to 0 (listed below)
# link = "logit" is the default. "cloglog" may be esp. useful when there are fewer recaptures
#Null Model
pnull <- list(formula = ~1, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Strata effect (in A or in B)
pstrata <- list(formula = ~stratum, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Guild effect
pguild <- list(formula = ~as.factor(guild), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Species effect
pspecies <- list(formula = ~as.factor(species), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
#---------------------------------------------------------------------------------
#          Define model structures for Psi (transition probability)
#---------------------------------------------------------------------------------
Psinull <- list(formula = ~1)
Psistrata <- list(formula = ~stratum)
Psiguild <- list(formula = ~as.factor(guild))
Psispecies <- list(formula = ~as.factor(species))
#SIMANNEAL should be best for multistrata models, but may take longer to run
Snull_pnull_Psinull <- mark(ms_process,ms_ddl, model.parameters = list(S = Snull,  p = pnull, Psi = Psinull),
options = "SIMANNEAL")
dim(practice3)
Sguild_pguild_Psiguild <- mark(ms_process,ms_ddl, model.parameters = list(S = Sguild,  p = pguild, Psi = Psiguild),
options = "SIMANNEAL")
summary(ms_process)
ms_process
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = c("sex", "sd_mass", "guild", "species")
)
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = c("sex", "guild", "species"))
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
?process.data
ms_data <- convert.inp("mark_datafiles//practice3.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = as.factor(c("sd_mass", "guild", "species")))
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = c("sex", "guild"))
ms_ddl <- make.design.data(ms_process) #ddl = design data list
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process) #ddl = design data list
ms_data <- convert.inp("mark_datafiles//practice3.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
#---------------------------------------------------------------------------------
#          process multistrata data, includes capture at home, and dipsersal transitions
#---------------------------------------------------------------------------------
# Build up the model. Looking at sex effects on dispersal/survival
ms_process <- process.data(ms_data,model = "Multistrata", begin.time = 261, groups = "sex")
ms_ddl <- make.design.data(ms_process) #ddl = design data list
ms_ddl
summary(ms_ddl)
PIMS
ms_ddl$S
head(ms_ddl$S)
head(ms_ddl)
summary(ms_ddl)
ms_ddl$S
head(ms_ddl$S)
head(ms_data)
is.dta.frame(ms_data)
is.data.frame(ms_data)
ms_data$guild = as.factor(ms_data$guild)
ms_process <- process.data(ms_data, model = "Multistrata", begin.time = 261, groups = c("sex", "guild"))
ms_ddl <- make.design.data(ms_process) #ddl = design data list
summary(ms_ddl)
ms_ddl$S
head(ms_ddl$s)
head(ms_ddl$S)
unique(ms_ddl$S$guild)
unique(ms_data$guild)
ms_data$guild = as.factor(ms_data$guild)
ms_data$species = as.factor(ms_data$species)
dim(ms_ddl)
class(ms_ddl)
ms_process <- process.data(ms_data, model = "Multistrata", begin.time = 261, groups = "sex")
dim(ms_process)
class(ms_process)
length(ms_process)
summary(ms_process)
ms_process <- process.data(ms_data, model = "Multistrata", begin.time = 261, groups = c("sex", "guild", "species")
)
length(ms_process)
summary(ms_process)
ms_ddl <- make.design.data(ms_process) #ddl = design data list
# Surival probability given that the individual is in A
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strataA = 0
ms_ddl$p$strataA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strataB = 0
ms_ddl$p$strataB[ms_ddl$p$stratum == "2"] = 1
#--------------------------------------------------------------------------------
# TODO: Build up the models
# Do psi and S significantly differ among species/guilds?
# Within a species/guild, do covariates (sex, body mass) influence psi and S?
#---------------------------------------------------------------------------------
#          Define model structures for S (survival probability)
#---------------------------------------------------------------------------------
Snull <- list(formula = ~1)           # null model, S is not dependent on strata
Sstrata <- list(formula = ~stratum)   # S is dependent on strata (in A or in B)
Sguild <- list(formula = ~as.factor(guild))  # testing if S differs among guilds?
Sspecies <- list(formula = ~as.factor(species)) # test for differences among species
# select periods that were omitted from the study - untrapped
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267,]))
p277 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 277,]))
p278 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 278,]))
p283 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 283,]))
p284 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 284,]))
p300 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 300,]))
p311 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 311,]))
p313 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 313,]))
p314 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 314,]))
p318 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 318,]))
p321 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 321,]))
p323 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 323,]))
p337 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 337,]))
p339 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 339,]))
p344 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 344,]))
p351 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 351,]))
# set those periods to p = 0, because they *can't* be anything else
p267val = rep(0, length(p267))
p277val = rep(0, length(p277))
p278val = rep(0, length(p278))
p283val = rep(0, length(p283))
p284val = rep(0, length(p284))
p300val = rep(0, length(p300))
p311val = rep(0, length(p311))
p313val = rep(0, length(p313))
p314val = rep(0, length(p314))
p318val = rep(0, length(p318))
p321val = rep(0, length(p321))
p323val = rep(0, length(p323))
p337val = rep(0, length(p337))
p339val = rep(0, length(p339))
p344val = rep(0, length(p344))
p351val = rep(0, length(p351))
# look for effects on recapture probability, given that some p are fixed to 0 (listed below)
# link = "logit" is the default. "cloglog" may be esp. useful when there are fewer recaptures
#Null Model
pnull <- list(formula = ~1, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Strata effect (in A or in B)
pstrata <- list(formula = ~stratum, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Guild effect
pguild <- list(formula = ~as.factor(guild), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Species effect
pspecies <- list(formula = ~as.factor(species), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
#---------------------------------------------------------------------------------
#          Define model structures for Psi (transition probability)
#---------------------------------------------------------------------------------
Psinull <- list(formula = ~1)
Psistrata <- list(formula = ~stratum)
Psiguild <- list(formula = ~as.factor(guild))
Psispecies <- list(formula = ~as.factor(species))
Snull_pnull_Psinull <- mark(ms_process,ms_ddl, model.parameters = list(S = Snull,  p = pnull, Psi = Psinull),
options = "SIMANNEAL")
library(RMark)
ms_data <- convert.inp("mark_datafiles//practice2.inp", group.df=data.frame(sex = c("male","female","unidsex")),
covariates = c("sd_mass", "guild", "species"))
#convert to factor
ms_data$guild = as.factor(ms_data$guild)
ms_data$species = as.factor(ms_data$species)
ms_process <- process.data(ms_data, model = "Multistrata", begin.time = 261, groups = c("sex", "guild", "species"))
ms_ddl <- make.design.data(ms_process) #ddl = design data list
#---------------------------------------------------------------------------------
#          make dummy variables and covariates
#---------------------------------------------------------------------------------
# Add dummy variables for operating on specific states(strata) or transitions
# A = 1 (home), B = 2 (away)
# A to B and B to B, is risky
# A to A and B to A, is less risky (within home, "normal" movements)
# Surival probability given that the individual is in A
ms_ddl$S$inA = 0
ms_ddl$S$inA[ms_ddl$S$stratum == "1"] = 1
# Surival probability given that the individual is in B
ms_ddl$S$inB = 0
ms_ddl$S$inB[ms_ddl$S$stratum == "2"] = 1
# Transition probability given that the individual  A ---> B
ms_ddl$Psi$toA = 0
ms_ddl$Psi$toA[ms_ddl$Psi$stratum == "2" & ms_ddl$Psi$tostratum == "1"] = 1
# Transition probability given that the individual  B ---> A
ms_ddl$Psi$toB = 0
ms_ddl$Psi$toB[ms_ddl$Psi$stratum == "1" & ms_ddl$Psi$tostratum == "2"] = 1
# recapture probability given that the individual is in A
ms_ddl$p$strataA = 0
ms_ddl$p$strataA[ms_ddl$p$stratum == "1"] = 1
# recapture probability given that the individual is in B
ms_ddl$p$strataB = 0
ms_ddl$p$strataB[ms_ddl$p$stratum == "2"] = 1
#--------------------------------------------------------------------------------
# TODO: Build up the models
# Do psi and S significantly differ among species/guilds?
# Within a species/guild, do covariates (sex, body mass) influence psi and S?
#---------------------------------------------------------------------------------
#          Define model structures for S (survival probability)
#---------------------------------------------------------------------------------
Snull <- list(formula = ~1)           # null model, S is not dependent on strata
Sstrata <- list(formula = ~stratum)   # S is dependent on strata (in A or in B)
Sguild <- list(formula = ~as.factor(guild))  # testing if S differs among guilds?
Sspecies <- list(formula = ~as.factor(species)) # test for differences among species
#---------------------------------------------------------------------------------
#          Define model structures for p (capture probability)
#---------------------------------------------------------------------------------
# fix recapture probabilities for unsampled or omitted months
#    skipped_periods = c(267, 277, 278, 283, 284, 300, 311, 313, 314, 318, 321, 323, 337, 339, 344, 351): p = 0
# select periods that were omitted from the study - untrapped
p267 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 267,]))
p277 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 277,]))
p278 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 278,]))
p283 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 283,]))
p284 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 284,]))
p300 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 300,]))
p311 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 311,]))
p313 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 313,]))
p314 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 314,]))
p318 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 318,]))
p321 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 321,]))
p323 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 323,]))
p337 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 337,]))
p339 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 339,]))
p344 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 344,]))
p351 = as.numeric(row.names(ms_ddl$p[ms_ddl$p$time == 351,]))
# set those periods to p = 0, because they *can't* be anything else
p267val = rep(0, length(p267))
p277val = rep(0, length(p277))
p278val = rep(0, length(p278))
p283val = rep(0, length(p283))
p284val = rep(0, length(p284))
p300val = rep(0, length(p300))
p311val = rep(0, length(p311))
p313val = rep(0, length(p313))
p314val = rep(0, length(p314))
p318val = rep(0, length(p318))
p321val = rep(0, length(p321))
p323val = rep(0, length(p323))
p337val = rep(0, length(p337))
p339val = rep(0, length(p339))
p344val = rep(0, length(p344))
p351val = rep(0, length(p351))
# look for effects on recapture probability, given that some p are fixed to 0 (listed below)
# link = "logit" is the default. "cloglog" may be esp. useful when there are fewer recaptures
#Null Model
pnull <- list(formula = ~1, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Strata effect (in A or in B)
pstrata <- list(formula = ~stratum, fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Guild effect
pguild <- list(formula = ~as.factor(guild), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
# Species effect
pspecies <- list(formula = ~as.factor(species), fixed = list(index = c(p267, p277, p278, p283, p284, p300, p311, p313, p314,
p318, p321, p323, p337, p339, p344, p351),
value = c(p267val, p277val, p278val, p283val, p284val, p300val, p311val,
p313val, p314val, p318val, p321val, p323val, p337val, p339val,
p344val, p351val), link = "cloglog"))
#---------------------------------------------------------------------------------
#          Define model structures for Psi (transition probability)
#---------------------------------------------------------------------------------
Psinull <- list(formula = ~1)
Psistrata <- list(formula = ~stratum)
Psiguild <- list(formula = ~as.factor(guild))
Psispecies <- list(formula = ~as.factor(species))
#SIMANNEAL should be best for multistrata models, but may take longer to run
Snull_pnull_Psinull <- mark(ms_process,ms_ddl, model.parameters = list(S = Snull,  p = pnull, Psi = Psinull),
options = "SIMANNEAL")
Snull_pnull_Psinull <- mark(ms_process,ms_ddl, model.parameters = list(S = Snull,  p = pnull, Psi = Psinull))#,
Sguild_pguild_Psiguild <- mark(ms_process,ms_ddl, model.parameters = list(S = Sguild,  p = pguild, Psi = Psiguild),
options = "SIMANNEAL")
